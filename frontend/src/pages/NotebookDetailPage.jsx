import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Button,
  Tabs,
  Card,
  Typography,
  Space,
  Input,
  Modal,
  Form,
  Select,
  message,
  Spin,
  Empty,
  Badge,
  Avatar,
  List,
  Tooltip,
  Dropdown,
  Upload,
  Radio,
  Divider,
  App,
} from "antd";
import MDEditor, { commands } from '@uiw/react-md-editor';
import NotebookLMEditor from '../components/NotebookLMEditor';
import '../styles/md-editor.css';

const { confirm } = Modal;
import {
  ArrowLeftOutlined,
  PlusOutlined,
  FileTextOutlined,
  MessageOutlined,
  BulbOutlined,
  UnorderedListOutlined,
  QuestionCircleOutlined,
  BookOutlined,
  LinkOutlined,
  FilePdfOutlined,
  GlobalOutlined,
  DeleteOutlined,
  EditOutlined,
  MoreOutlined,
  RobotOutlined,
  UploadOutlined,
  FileWordOutlined,
  FileExcelOutlined,
  InboxOutlined,
  SendOutlined,
  CheckOutlined,
} from "@ant-design/icons";

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;

export default function NotebookDetailPage() {
  const { modal } = App.useApp();
  const { id } = useParams();
  const navigate = useNavigate();
  const [notebook, setNotebook] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("sources");

  // Modals
  const [sourceModalOpen, setSourceModalOpen] = useState(false);
  const [noteModalOpen, setNoteModalOpen] = useState(false);
  const [editNoteModalOpen, setEditNoteModalOpen] = useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [sessionToDelete, setSessionToDelete] = useState(null);
  const [noteToEdit, setNoteToEdit] = useState(null);
  const [noteToDelete, setNoteToDelete] = useState(null);
  const [sourceType, setSourceType] = useState("text"); // 'text', 'file', 'url'
  const [fileList, setFileList] = useState([]);

  // Markdown content states
  const [newNoteContent, setNewNoteContent] = useState("");
  const [editNoteContent, setEditNoteContent] = useState("");
  const [isAutoSaving, setIsAutoSaving] = useState(false);

  // Word count helper
  const getWordCount = (text) => {
    if (!text) return 0;
    return text.replace(/[#*`>\-+]/g, '').split(/\s+/).filter(word => word.length > 0).length;
  };

  const getCharCount = (text) => {
    if (!text) return 0;
    return text.length;
  };

  // Custom commands for MDEditor
  const customCommands = [
    // Text formatting group
    commands.bold,
    commands.italic, 
    commands.strikethrough,
    commands.divider,
    
    // Headers group
    commands.title1,
    commands.title2, 
    commands.title3,
    commands.title4,
    commands.title5,
    commands.title6,
    commands.divider,
    
    // Lists group
    commands.unorderedListCommand,
    commands.orderedListCommand,
    commands.checkedListCommand,
    commands.divider,
    
    // Media & Links group
    commands.quote,
    commands.hr,
    commands.link,
    commands.image,
    commands.divider,
    
    // Code group
    commands.code,
    commands.codeBlock,
    commands.divider,
    
    // Tables group
    commands.table,
    commands.divider,
    
    // Custom word count command
    {
      name: 'wordCount',
      keyCommand: 'wordCount',
      buttonProps: { 'aria-label': 'Word count', title: 'Word count' },
      icon: (
        <div style={{ fontSize: '11px', fontWeight: 500, color: '#5f6368', minWidth: '60px', textAlign: 'center' }}>
          üìù {getWordCount(newNoteContent)} t·ª´
        </div>
      ),
      execute: () => {
        // Do nothing, just display count
      },
    },
    
    // View controls
    commands.divider,
    commands.fullscreen,
  ];

  // Markdown templates
  const markdownTemplates = {
    blank: "",
    meeting: `# Ghi ch√∫ cu·ªôc h·ªçp

**Ng√†y:** ${new Date().toLocaleDateString('vi-VN')}
**Th·ªùi gian:** 
**Ng∆∞·ªùi tham gia:** 

## Ch·ªß ƒë·ªÅ ch√≠nh

## C√°c quy·∫øt ƒë·ªãnh quan tr·ªçng
- [ ] 
- [ ] 
- [ ] 

## H√†nh ƒë·ªông ti·∫øp theo
- [ ] **Ng∆∞·ªùi ph·ª• tr√°ch:** | **Deadline:** 
- [ ] **Ng∆∞·ªùi ph·ª• tr√°ch:** | **Deadline:** 

## Ghi ch√∫ kh√°c

`,
    study: `# Ghi ch√∫ h·ªçc t·∫≠p

## üìö Ch·ªß ƒë·ªÅ: 

### üéØ M·ª•c ti√™u h·ªçc t·∫≠p
- 
- 
- 

### üìù N·ªôi dung ch√≠nh

#### 1. 

#### 2. 

#### 3. 

### üí° ƒêi·ªÉm quan tr·ªçng
> 

### ‚ùì C√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p
- 
- 

### üìã T√≥m t·∫Øt
- **Kh√°i ni·ªám ch√≠nh:** 
- **·ª®ng d·ª•ng:** 
- **L∆∞u √Ω:** 

`,
    todo: `# To-Do List

## üéØ M·ª•c ti√™u h√¥m nay

### ‚ö° ∆Øu ti√™n cao
- [ ] 
- [ ] 
- [ ] 

### üìã C√¥ng vi·ªác th∆∞·ªùng
- [ ] 
- [ ] 
- [ ] 

### üí° √ù t∆∞·ªüng
- [ ] 
- [ ] 

### ‚úÖ Ho√†n th√†nh
- [x] 

---
**Ng√†y:** ${new Date().toLocaleDateString('vi-VN')}
`,
    research: `# Nghi√™n c·ª©u: [Ti√™u ƒë·ªÅ]

## üîç M·ª•c ti√™u nghi√™n c·ª©u

## üìä D·ªØ li·ªáu & Ngu·ªìn

### Ngu·ªìn 1:
- **Link:** 
- **T√°c gi·∫£:** 
- **T√≥m t·∫Øt:** 

### Ngu·ªìn 2:
- **Link:** 
- **T√°c gi·∫£:** 
- **T√≥m t·∫Øt:** 

## üìù Ph√¢n t√≠ch

### ƒêi·ªÉm ch√≠nh
1. 
2. 
3. 

### So s√°nh
| Ti√™u ch√≠ | Ngu·ªìn 1 | Ngu·ªìn 2 |
|----------|---------|---------|
|          |         |         |
|          |         |         |

## üí≠ K·∫øt lu·∫≠n

## üîó T√†i li·ªáu tham kh·∫£o
1. 
2. 
3. 
`
  };

  // AI Chat
  const [chatMessages, setChatMessages] = useState([]);
  const [chatLoading, setChatLoading] = useState(false);
  const [selectedMessages, setSelectedMessages] = useState([]);

  // Chat sessions
  const [chatSessions, setChatSessions] = useState([]);
  const [currentSessionId, setCurrentSessionId] = useState(null);

  // Forms
  const [sourceForm] = Form.useForm();
  const [noteForm] = Form.useForm();
  const [editNoteForm] = Form.useForm();
  const [chatForm] = Form.useForm();

  // Chat-to-note states
  const [createNoteFromChatModalOpen, setCreateNoteFromChatModalOpen] = useState(false);
  const [chatNoteContent, setChatNoteContent] = useState("");
  const [chatNoteForm] = Form.useForm();

  useEffect(() => {
    fetchNotebook();
    fetchChatSessions();
  }, [id]);

  const fetchNotebook = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/notebooks/${id}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setNotebook(data);
      } else {
        message.error("Kh√¥ng th·ªÉ t·∫£i notebook");
        navigate("/notebooks");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    } finally {
      setLoading(false);
    }
  };

  const handleAddSource = async (values) => {
    try {
      const token = localStorage.getItem("token");
      let response;

      if (sourceType === "file" && fileList.length > 0) {
        // Upload file
        const formData = new FormData();
        formData.append("file", fileList[0].originFileObj);
        formData.append("title", values.title);
        formData.append("type", values.type || "document");

        response = await fetch(`/api/notebooks/${id}/sources/upload`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        });
      } else if (sourceType === "url") {
        // Add from URL
        response = await fetch(`/api/notebooks/${id}/sources/url`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            title: values.title,
            url: values.url,
          }),
        });
      } else {
        // Add text content
        response = await fetch(`/api/notebooks/${id}/sources`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(values),
        });
      }

      if (response.ok) {
        message.success("Th√™m ngu·ªìn th√†nh c√¥ng");
        fetchNotebook();
        setSourceModalOpen(false);
        sourceForm.resetFields();
        setFileList([]);
        setSourceType("text");
      } else {
        message.error("Kh√¥ng th·ªÉ th√™m ngu·ªìn");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    }
  };

  const handleAddNote = async (values) => {
    // Validation cho markdown content
    if (!newNoteContent || newNoteContent.trim() === "") {
      message.error("Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const noteData = {
        ...values,
        content: newNoteContent
      };
      
      const response = await fetch(`/api/notebooks/${id}/notes`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(noteData),
      });

      if (response.ok) {
        message.success("Th√™m ghi ch√∫ th√†nh c√¥ng");
        fetchNotebook();
        setNoteModalOpen(false);
        noteForm.resetFields();
        setNewNoteContent("");
      } else {
        message.error("Kh√¥ng th·ªÉ th√™m ghi ch√∫");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    }
  };

  const handleGenerateNote = async (values) => {
    try {
      setChatLoading(true);
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/notebooks/${id}/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(values),
      });

      if (response.ok) {
        const newNote = await response.json();
        message.success("T·∫°o ghi ch√∫ AI th√†nh c√¥ng");
        fetchNotebook();
        setActiveTab("notes");
      } else {
        message.error("Kh√¥ng th·ªÉ t·∫°o ghi ch√∫ AI");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    } finally {
      setChatLoading(false);
    }
  };

  const handleChat = async (values) => {
    try {
      setChatLoading(true);
      const token = localStorage.getItem("token");

      const response = await fetch(`/api/notebooks/${id}/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          prompt: values.prompt,
          sessionId: currentSessionId,
          type: "chat",
        }),
      });

      if (response.ok) {
        const data = await response.json();

        // C·∫≠p nh·∫≠t session ID n·∫øu c√≥
        if (data.sessionId && !currentSessionId) {
          setCurrentSessionId(data.sessionId);
        }

        // Th√™m tin nh·∫Øn v√†o UI
        setChatMessages((prev) => [
          ...prev,
          { role: "user", content: values.prompt },
          { role: "assistant", content: data.result },
        ]);

        // Reset form
        chatForm.resetFields();

        // C·∫≠p nh·∫≠t danh s√°ch sessions
        fetchChatSessions();

        message.success("AI ƒë√£ tr·∫£ l·ªùi");
      } else {
        const error = await response.json();
        message.error(error.error || "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    } finally {
      setChatLoading(false);
    }
  };

  const fetchChatSessions = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/notebooks/${id}/chat-sessions`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const sessions = await response.json();
        setChatSessions(sessions);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i chat sessions:", error);
    }
  };

  const loadChatSession = async (sessionId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `/api/notebooks/${id}/chat-sessions/${sessionId}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        const session = await response.json();
        setCurrentSessionId(sessionId);
        setChatMessages(
          session.messages.map((msg) => ({
            role: msg.role,
            content: msg.content,
          }))
        );
        setSelectedMessages([]); // Reset selected messages
      }
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat");
    }
  };

  const startNewChatSession = () => {
    setCurrentSessionId(null);
    setChatMessages([]);
    setSelectedMessages([]); // Reset selected messages
  };

  const handleDeleteConfirm = () => {
    if (sessionToDelete) {
      deleteChatSession(sessionToDelete);
      setDeleteModalOpen(false);
      setSessionToDelete(null);
    } else if (noteToDelete) {
      handleDeleteNote();
    }
  };

  const handleDeleteCancel = () => {
    setDeleteModalOpen(false);
    setSessionToDelete(null);
    setNoteToDelete(null);
  };

  const handleEditNote = (note) => {
    setNoteToEdit(note);
    editNoteForm.setFieldsValue({
      title: note.title,
      type: note.type,
    });
    setEditNoteContent(note.content || "");
    setEditNoteModalOpen(true);
  };

  const handleUpdateNote = async (values) => {
    // Validation cho markdown content
    if (!editNoteContent || editNoteContent.trim() === "") {
      message.error("Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const noteData = {
        ...values,
        content: editNoteContent
      };
      
      const response = await fetch(`/api/notebooks/${id}/notes/${noteToEdit.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(noteData),
      });

      if (response.ok) {
        message.success("C·∫≠p nh·∫≠t ghi ch√∫ th√†nh c√¥ng");
        fetchNotebook();
        setEditNoteModalOpen(false);
        setNoteToEdit(null);
        editNoteForm.resetFields();
        setEditNoteContent("");
      } else {
        message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ghi ch√∫");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    }
  };

  const handleDeleteNote = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/notebooks/${id}/notes/${noteToDelete.id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        message.success("ƒê√£ x√≥a ghi ch√∫");
        fetchNotebook();
        setDeleteModalOpen(false);
        setNoteToDelete(null);
      } else {
        message.error("Kh√¥ng th·ªÉ x√≥a ghi ch√∫");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    }
  };

  const handleMessageSelect = (messageIndex) => {
    setSelectedMessages(prev => {
      if (prev.includes(messageIndex)) {
        return prev.filter(idx => idx !== messageIndex);
      } else {
        return [...prev, messageIndex];
      }
    });
  };

  const handleCreateNoteFromChat = async () => {
    try {
      setChatLoading(true);
      
      const selectedChatContent = selectedMessages
        .sort((a, b) => a - b)
        .map(idx => {
          const msg = chatMessages[idx];
          return `${msg.role === 'user' ? 'Q' : 'A'}: ${msg.content}`;
        })
        .join('\n\n');

      // G·ªçi AI ƒë·ªÉ format l·∫°i n·ªôi dung cho ƒë·∫πp
      const token = localStorage.getItem("token");
      const formatResponse = await fetch(`/api/notebooks/${id}/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          prompt: `H√£y format l·∫°i ƒëo·∫°n chat sau th√†nh m·ªôt ghi ch√∫ c√≥ c·∫•u tr√∫c ƒë·∫πp, d·ªÖ ƒë·ªçc v√† chuy√™n nghi·ªáp. S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng. T·∫°o ti√™u ƒë·ªÅ, ph·∫ßn t√≥m t·∫Øt, v√† s·∫Øp x·∫øp th√¥ng tin logic:\n\n${selectedChatContent}`,
          type: "format",
        }),
      });

      if (formatResponse.ok) {
        const formatData = await formatResponse.json();
        
        // T·∫°o ti√™u ƒë·ªÅ t·ª´ n·ªôi dung ƒë√£ format
        const lines = formatData.result.split('\n').filter(line => line.trim());
        const autoTitle = lines[0] || `Ghi ch√∫ chat - ${new Date().toLocaleDateString('vi-VN')}`;
        
        // Set content cho modal enhanced editor
        setChatNoteContent(formatData.result);
        chatNoteForm.setFieldsValue({
          title: autoTitle.replace(/^#+\s*/, '').substring(0, 100),
          type: 'text'
        });
        setCreateNoteFromChatModalOpen(true);
      } else {
        // Fallback to simple format if AI fails
        const firstMessage = chatMessages[selectedMessages.sort((a, b) => a - b)[0]];
        const autoTitle = `Ghi ch√∫ chat - ${firstMessage.content.substring(0, 50)}${firstMessage.content.length > 50 ? '...' : ''}`;
        
        setChatNoteContent(`# ${autoTitle}\n\n${selectedChatContent}`);
        chatNoteForm.setFieldsValue({
          title: autoTitle,
          type: 'text'
        });
        setCreateNoteFromChatModalOpen(true);
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    } finally {
      setChatLoading(false);
    }
  };

  const deleteChatSession = async (sessionId) => {
    try {
      console.log("Deleting session:", sessionId);
      const token = localStorage.getItem("token");
      const response = await fetch(
        `/api/notebooks/${id}/chat-sessions/${sessionId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      console.log("Delete response:", response.status, response.ok);

      if (response.ok) {
        message.success("ƒê√£ x√≥a phi√™n chat");

        // N·∫øu ƒëang xem session n√†y th√¨ chuy·ªÉn v·ªÅ chat m·ªõi
        if (currentSessionId === sessionId) {
          startNewChatSession();
        }

        // C·∫≠p nh·∫≠t danh s√°ch sessions
        fetchChatSessions();
      } else {
        const errorData = await response.json();
        console.error("Delete error:", errorData);
        message.error(
          "Kh√¥ng th·ªÉ x√≥a phi√™n chat: " + (errorData.error || "Unknown error")
        );
      }
    } catch (error) {
      console.error("Delete chat session error:", error);
      message.error("L·ªói khi x√≥a phi√™n chat");
    }
  };

  const getSourceIcon = (source) => {
    if (source.fileName) {
      const ext = source.fileName.split(".").pop().toLowerCase();
      switch (ext) {
        case "pdf":
          return <FilePdfOutlined style={{ color: "#f40" }} />;
        case "doc":
        case "docx":
          return <FileWordOutlined style={{ color: "#1890ff" }} />;
        case "xls":
        case "xlsx":
          return <FileExcelOutlined style={{ color: "#52c41a" }} />;
        default:
          return <FileTextOutlined />;
      }
    }

    switch (source.type) {
      case "pdf":
        return <FilePdfOutlined style={{ color: "#f40" }} />;
      case "webpage":
        return <GlobalOutlined style={{ color: "#1890ff" }} />;
      case "document":
        return <FileTextOutlined />;
      default:
        return <FileTextOutlined />;
    }
  };

  const getNoteTypeIcon = (type) => {
    switch (type) {
      case "summary":
        return <BulbOutlined />;
      case "outline":
        return <UnorderedListOutlined />;
      case "qa":
        return <QuestionCircleOutlined />;
      default:
        return <FileTextOutlined />;
    }
  };

  const aiToolsItems = [
    {
      key: "summary",
      label: "T·∫°o t√≥m t·∫Øt",
      icon: <BulbOutlined />,
      onClick: () =>
        handleGenerateNote({
          type: "summary",
          prompt: "T·∫°o t√≥m t·∫Øt t·ª´ c√°c ngu·ªìn t√†i li·ªáu",
        }),
    },
    {
      key: "outline",
      label: "T·∫°o outline",
      icon: <UnorderedListOutlined />,
      onClick: () =>
        handleGenerateNote({
          type: "outline",
          prompt: "T·∫°o outline c√≥ c·∫•u tr√∫c t·ª´ c√°c ngu·ªìn t√†i li·ªáu",
        }),
    },
    {
      key: "qa",
      label: "T·∫°o Q&A",
      icon: <QuestionCircleOutlined />,
      onClick: () =>
        handleGenerateNote({
          type: "qa",
          prompt: "T·∫°o c√°c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ c√°c ngu·ªìn t√†i li·ªáu",
        }),
    },
  ];

  const handleDownloadFile = async (source) => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `/api/notebooks/${id}/sources/${source.id}/download`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = source.fileName || `${source.title}.txt`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        message.success("T·∫£i file th√†nh c√¥ng");
      } else {
        message.error("Kh√¥ng th·ªÉ t·∫£i file");
      }
    } catch (error) {
      message.error("L·ªói khi t·∫£i file");
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Spin size="large" />
      </div>
    );
  }

  if (!notebook) {
    return <div>Kh√¥ng t√¨m th·∫•y notebook</div>;
  }

  const tabItems = [
    {
      key: "sources",
      label: (
        <Badge count={notebook.sources?.length || 0} offset={[10, 0]}>
          <span>Ngu·ªìn t√†i li·ªáu</span>
        </Badge>
      ),
      children: (
        <div>
          <div className="flex justify-between items-center mb-4">
            <Text type="secondary">
              Th√™m t√†i li·ªáu ƒë·ªÉ AI c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n
            </Text>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => setSourceModalOpen(true)}
            >
              Th√™m ngu·ªìn
            </Button>
          </div>

          {notebook.sources?.length === 0 ? (
            <Empty description="Ch∆∞a c√≥ ngu·ªìn t√†i li·ªáu n√†o" />
          ) : (
            <List
              dataSource={notebook.sources}
              renderItem={(source) => (
                <List.Item
                  actions={[
                    <Tooltip title="X√≥a">
                      <Button
                        type="text"
                        icon={<DeleteOutlined />}
                        danger
                        size="small"
                      />
                    </Tooltip>,
                  ]}
                >
                  <List.Item.Meta
                    avatar={<Avatar icon={getSourceIcon(source)} />}
                    title={
                      <div className="flex items-center gap-2">
                        {source.fileName ? (
                          <Button
                            type="link"
                            className="p-0 h-auto text-left"
                            onClick={() => handleDownloadFile(source)}
                          >
                            <span className="text-blue-600 hover:text-blue-800">
                              {source.title}
                            </span>
                          </Button>
                        ) : (
                          <span>{source.title}</span>
                        )}
                        {source.fileName && (
                          <span className="text-xs text-gray-500">
                            ({Math.round(source.fileSize / 1024)} KB)
                          </span>
                        )}
                      </div>
                    }
                    description={
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-600">
                          {source.fileName
                            ? `File: ${source.fileName}`
                            : "VƒÉn b·∫£n"}
                        </span>
                        {source.url && (
                          <Text type="secondary">
                            <LinkOutlined />{" "}
                            <a
                              href={source.url}
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              Link
                            </a>
                          </Text>
                        )}
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
          )}
        </div>
      ),
    },
    {
      key: "notes",
      label: (
        <Badge count={notebook.notes?.length || 0} offset={[10, 0]}>
          <span>Ghi ch√∫</span>
        </Badge>
      ),
      children: (
        <div>
          <div className="flex justify-between items-center mb-4">
            <Text type="secondary">Ghi ch√∫ c·ªßa b·∫°n v√† nh·ªØng g√¨ AI t·∫°o ra</Text>
            <Space>
              <Dropdown
                menu={{ items: aiToolsItems }}
                trigger={["click"]}
                disabled={!notebook.sources?.length}
              >
                <Button
                  icon={<RobotOutlined />}
                  loading={chatLoading}
                  disabled={!notebook.sources?.length}
                >
                  AI Tools
                </Button>
              </Dropdown>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={() => setNoteModalOpen(true)}
              >
                Ghi ch√∫ m·ªõi
              </Button>
            </Space>
          </div>

          {notebook.notes?.length === 0 ? (
            <Empty description="Ch∆∞a c√≥ ghi ch√∫ n√†o" />
          ) : (
            <List
              dataSource={notebook.notes}
              renderItem={(note) => (
                <List.Item
                  actions={[
                    <Tooltip title="S·ª≠a ghi ch√∫">
                      <Button 
                        type="text" 
                        icon={<EditOutlined />} 
                        size="small"
                        onClick={() => handleEditNote(note)}
                      />
                    </Tooltip>,
                    <Tooltip title="X√≥a ghi ch√∫">
                      <Button
                        type="text"
                        icon={<DeleteOutlined />}
                        danger
                        size="small"
                        onClick={() => {
                          setNoteToDelete(note);
                          setDeleteModalOpen(true);
                        }}
                      />
                    </Tooltip>,
                  ]}
                >
                  <List.Item.Meta
                    avatar={<Avatar icon={getNoteTypeIcon(note.type)} />}
                    title={note.title}
                    description={
                      <div 
                        className="prose prose-sm max-w-none"
                        style={{ maxHeight: '120px', overflow: 'hidden' }}
                      >
                        <div
                          dangerouslySetInnerHTML={{
                            __html: note.content
                              .split('\n')
                              .slice(0, 4) // Show first 4 lines
                              .map(line => {
                                // Format headers
                                if (line.startsWith('#')) {
                                  const level = line.match(/^#+/)[0].length;
                                  const text = line.replace(/^#+\s*/, '');
                                  return `<h${Math.min(level, 6)} class="font-semibold text-gray-800 mb-1">${text}</h${Math.min(level, 6)}>`;
                                }
                                // Format bold text
                                line = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                                // Format lists
                                if (line.match(/^\d+\./)) {
                                  return `<div class="ml-2">${line}</div>`;
                                }
                                if (line.match(/^[-*]/)) {
                                  return `<div class="ml-2">${line}</div>`;
                                }
                                return line ? `<div class="mb-1">${line}</div>` : '';
                              })
                              .join('')
                          }}
                        />
                        {note.content.split('\n').length > 4 && (
                          <div className="text-gray-400 text-xs mt-2">...</div>
                        )}
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
          )}
        </div>
      ),
    },
    {
      key: "chat",
      label: "Chat v·ªõi AI",
      children: (
        <div className="flex gap-4 h-96">
          {/* Chat Sessions Sidebar */}
          <div className="w-64 border-r pr-4">
            <div className="flex justify-between items-center mb-4">
              <Text strong>L·ªãch s·ª≠ Chat</Text>
              <Button type="primary" size="small" onClick={startNewChatSession}>
                Chat m·ªõi
              </Button>
            </div>

            <div className="space-y-2 max-h-80 overflow-y-auto">
              {chatSessions.map((session) => (
                <Card
                  key={session.id}
                  size="small"
                  className={`cursor-pointer hover:bg-gray-50 ${
                    currentSessionId === session.id ? "border-blue-500" : ""
                  }`}
                  onClick={() => loadChatSession(session.id)}
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1 min-w-0">
                      <div className="truncate text-sm">{session.title}</div>
                      <div className="text-xs text-gray-500">
                        {new Date(session.updatedAt).toLocaleDateString(
                          "vi-VN"
                        )}
                      </div>
                      {session.messages?.length > 0 && (
                        <div className="text-xs text-gray-400 truncate mt-1">
                          {session.messages[0]?.content}
                        </div>
                      )}
                    </div>
                    <Tooltip title="X√≥a phi√™n chat">
                      <Button
                        type="text"
                        size="small"
                        icon={<DeleteOutlined />}
                        danger
                        className="ml-2"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSessionToDelete(session.id);
                          setDeleteModalOpen(true);
                        }}
                      />
                    </Tooltip>
                  </div>
                </Card>
              ))}

              {chatSessions.length === 0 && (
                <Empty
                  description="Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o"
                  image={Empty.PRESENTED_IMAGE_SIMPLE}
                />
              )}
            </div>
          </div>

          {/* Chat Area */}
          <div className="flex-1 flex flex-col">
            {/* Chat Actions */}
            {chatMessages.length > 0 && (
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-2">
                  <Text type="secondary">
                    {selectedMessages.length > 0 
                      ? `ƒê√£ ch·ªçn ${selectedMessages.length} tin nh·∫Øn`
                      : "Click ƒë·ªÉ ch·ªçn tin nh·∫Øn v√† l∆∞u v√†o ghi ch√∫"
                    }
                  </Text>
                </div>
                <Space>
                  {selectedMessages.length > 0 && (
                    <>
                      <Button
                        size="small"
                        onClick={() => setSelectedMessages([])}
                      >
                        B·ªè ch·ªçn
                      </Button>
                      <Button
                        type="primary"
                        size="small"
                        icon={<FileTextOutlined />}
                        loading={chatLoading}
                        onClick={handleCreateNoteFromChat}
                      >
                        {chatLoading ? "ƒêang t·∫°o..." : "L∆∞u v√†o ghi ch√∫"}
                      </Button>
                    </>
                  )}
                </Space>
              </div>
            )}

            <div className="flex-1 bg-gray-50 rounded-lg p-4 mb-4 overflow-y-auto">
              {chatMessages.length === 0 ? (
                <Empty
                  image={
                    <MessageOutlined style={{ fontSize: 48, color: "#ccc" }} />
                  }
                  description={
                    <div className="text-center">
                      <p>B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán v·ªõi AI v·ªÅ notebook n√†y</p>
                      <p className="text-sm text-gray-500 mt-2">
                        AI ƒë√£ ƒë∆∞·ª£c training v·ªÅ t·∫•t c·∫£ ngu·ªìn t√†i li·ªáu v√† s·∫Ω nh·ªõ
                        l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
                      </p>
                    </div>
                  }
                />
              ) : (
                <div className="space-y-4">
                  {chatMessages.map((msg, index) => (
                    <div
                      key={index}
                      className={`flex ${
                        msg.role === "user" ? "justify-end" : "justify-start"
                      }`}
                    >
                      <div 
                        className={`relative flex items-start gap-2 max-w-[80%] cursor-pointer rounded-lg p-2 transition-all duration-200 ${
                          selectedMessages.includes(index) 
                            ? "bg-blue-50 border-2 border-blue-300 shadow-md" 
                            : "hover:bg-gray-50 border-2 border-transparent"
                        }`}
                        onClick={() => handleMessageSelect(index)}
                      >
                        {selectedMessages.includes(index) && (
                          <div className="absolute -top-2 -right-2 bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs z-10">
                            <CheckOutlined />
                          </div>
                        )}
                        {msg.role === "assistant" && (
                          <Avatar
                            icon={<RobotOutlined />}
                            size="small"
                            className="mt-1 flex-shrink-0"
                          />
                        )}
                        <div
                          className={`px-4 py-3 rounded-lg ${
                            msg.role === "user"
                              ? "bg-blue-500 text-white"
                              : "bg-white border shadow-sm"
                          }`}
                        >
                          <div className="whitespace-pre-wrap text-left leading-relaxed">
                            {msg.role === "assistant" ? (
                              <div 
                                className="prose prose-sm max-w-none"
                                dangerouslySetInnerHTML={{
                                  __html: msg.content
                                    .split('\n')
                                    .map(line => {
                                      // Format lists
                                      if (line.match(/^\d+\./)) {
                                        return `<div class="mb-1 ml-4"><strong>${line}</strong></div>`;
                                      }
                                      // Format bold text
                                      line = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                                      // Format sections
                                      if (line.includes(':') && !line.includes('http')) {
                                        const [title, ...rest] = line.split(':');
                                        if (rest.length > 0) {
                                          return `<div class="mb-2"><strong>${title}:</strong> ${rest.join(':')}</div>`;
                                        }
                                      }
                                      return line ? `<div class="mb-1">${line}</div>` : '<br>';
                                    })
                                    .join('')
                                }}
                              />
                            ) : (
                              msg.content
                            )}
                          </div>
                        </div>
                        {msg.role === "user" && (
                          <Avatar
                            icon={<MessageOutlined />}
                            size="small"
                            className="mt-1 flex-shrink-0"
                          />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <Form form={chatForm} onFinish={handleChat}>
              <Form.Item name="prompt" className="mb-2">
                <Input.Search
                  placeholder="H·ªèi AI v·ªÅ n·ªôi dung notebook..."
                  enterButton={
                    <Button
                      type="primary"
                      icon={<SendOutlined />}
                      loading={chatLoading}
                    >
                      G·ª≠i
                    </Button>
                  }
                  loading={chatLoading}
                  disabled={!notebook.sources?.length || chatLoading}
                  size="large"
                  onSearch={() => {
                    const values = chatForm.getFieldsValue();
                    if (values.prompt) {
                      handleChat(values);
                    }
                  }}
                />
              </Form.Item>
              {!notebook.sources?.length && (
                <Text type="secondary" className="text-sm">
                  Th√™m ngu·ªìn t√†i li·ªáu ƒë·ªÉ c√≥ th·ªÉ chat v·ªõi AI
                </Text>
              )}
            </Form>
          </div>
        </div>
      ),
    },
  ];

  const handleSaveChatNote = async (values) => {
    // Validation cho markdown content
    if (!chatNoteContent || chatNoteContent.trim() === "") {
      message.error("Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const noteData = {
        ...values,
        content: chatNoteContent
      };
      
      const response = await fetch(`/api/notebooks/${id}/notes`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(noteData),
      });

      if (response.ok) {
        message.success("ƒê√£ t·∫°o ghi ch√∫ t·ª´ chat");
        chatNoteForm.resetFields();
        setChatNoteContent("");
        setCreateNoteFromChatModalOpen(false);
        setSelectedMessages([]);
        fetchNotebook();
        setActiveTab("notes");
      } else {
        const errorData = await response.json();
        message.error(errorData.error || "Kh√¥ng th·ªÉ t·∫°o ghi ch√∫");
      }
    } catch (error) {
      message.error("L·ªói k·∫øt n·ªëi");
    }
  };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <Button
          icon={<ArrowLeftOutlined />}
          onClick={() => navigate("/notebooks")}
        >
          Quay l·∫°i
        </Button>
        <div className="flex-1">
          <Title level={2} className="mb-1">
            {notebook.title}
          </Title>
          {notebook.description && (
            <Text type="secondary">{notebook.description}</Text>
          )}
        </div>
      </div>

      {/* Content */}
      <Tabs
        activeKey={activeTab}
        onChange={setActiveTab}
        items={tabItems}
        size="large"
      />

      {/* Source Modal */}
      <Modal
        title="Th√™m ngu·ªìn t√†i li·ªáu"
        open={sourceModalOpen}
        onCancel={() => {
          setSourceModalOpen(false);
          setSourceType("text");
          setFileList([]);
          sourceForm.resetFields();
        }}
        footer={null}
        width={600}
      >
        <div className="mb-4">
          <Radio.Group
            value={sourceType}
            onChange={(e) => setSourceType(e.target.value)}
            className="w-full"
          >
            <Radio.Button value="text" className="flex-1 text-center">
              <FileTextOutlined /> VƒÉn b·∫£n
            </Radio.Button>
            <Radio.Button value="file" className="flex-1 text-center">
              <UploadOutlined /> Upload File
            </Radio.Button>
            <Radio.Button value="url" className="flex-1 text-center">
              <GlobalOutlined /> T·ª´ URL
            </Radio.Button>
          </Radio.Group>
        </div>

        <Form form={sourceForm} layout="vertical" onFinish={handleAddSource}>
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ" }]}
          >
            <Input placeholder="Ti√™u ƒë·ªÅ ngu·ªìn t√†i li·ªáu..." />
          </Form.Item>

          {sourceType === "file" && (
            <>
              <Form.Item
                name="type"
                label="Lo·∫°i t√†i li·ªáu"
                initialValue="document"
              >
                <Select>
                  <Select.Option value="document">T√†i li·ªáu</Select.Option>
                  <Select.Option value="pdf">PDF</Select.Option>
                  <Select.Option value="text">VƒÉn b·∫£n thu·∫ßn</Select.Option>
                </Select>
              </Form.Item>

              <Form.Item label="Upload File">
                <Upload.Dragger
                  fileList={fileList}
                  onChange={({ fileList }) => setFileList(fileList)}
                  beforeUpload={() => false}
                  accept=".pdf,.doc,.docx,.txt,.xls,.xlsx,.csv"
                  maxCount={1}
                >
                  <p className="ant-upload-drag-icon">
                    <InboxOutlined />
                  </p>
                  <p className="ant-upload-text">
                    K√©o th·∫£ file v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn
                  </p>
                  <p className="ant-upload-hint">
                    H·ªó tr·ª£: PDF, Word, Excel, TXT, CSV (t·ªëi ƒëa 10MB)
                  </p>
                </Upload.Dragger>
              </Form.Item>
            </>
          )}

          {sourceType === "url" && (
            <Form.Item
              name="url"
              label="URL"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p URL" },
                { type: "url", message: "URL kh√¥ng h·ª£p l·ªá" },
              ]}
            >
              <Input placeholder="https://example.com" />
            </Form.Item>
          )}

          {sourceType === "text" && (
            <>
              <Form.Item
                name="type"
                label="Lo·∫°i"
                rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i" }]}
                initialValue="text"
              >
                <Select placeholder="Ch·ªçn lo·∫°i ngu·ªìn">
                  <Select.Option value="text">VƒÉn b·∫£n</Select.Option>
                  <Select.Option value="document">T√†i li·ªáu</Select.Option>
                  <Select.Option value="webpage">Trang web</Select.Option>
                </Select>
              </Form.Item>

              <Form.Item name="url" label="URL (t√πy ch·ªçn)">
                <Input placeholder="https://..." />
              </Form.Item>

              <Form.Item
                name="content"
                label="N·ªôi dung"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung" }]}
              >
                <TextArea rows={6} placeholder="N·ªôi dung ngu·ªìn t√†i li·ªáu..." />
              </Form.Item>
            </>
          )}

          <Form.Item className="mb-0 text-right">
            <Space>
              <Button
                onClick={() => {
                  setSourceModalOpen(false);
                  setSourceType("text");
                  setFileList([]);
                  sourceForm.resetFields();
                }}
              >
                H·ªßy
              </Button>
              <Button
                type="primary"
                htmlType="submit"
                disabled={sourceType === "file" && fileList.length === 0}
              >
                Th√™m
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Note Modal */}
      <Modal
        title="Th√™m ghi ch√∫"
        open={noteModalOpen}
        onCancel={() => {
          setNoteModalOpen(false);
          setNewNoteContent("");
          noteForm.resetFields();
        }}
        footer={null}
        width={1000}
        style={{ top: 20 }}
        centered={false}
      >
        <Form form={noteForm} layout="vertical" onFinish={handleAddNote}>
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ" }]}
          >
            <Input placeholder="Ti√™u ƒë·ªÅ ghi ch√∫..." />
          </Form.Item>

          <Form.Item name="type" label="Lo·∫°i ghi ch√∫" initialValue="text">
            <Select>
              <Select.Option value="text">VƒÉn b·∫£n th∆∞·ªùng</Select.Option>
              <Select.Option value="summary">T√≥m t·∫Øt</Select.Option>
              <Select.Option value="outline">Outline</Select.Option>
              <Select.Option value="qa">H·ªèi ƒë√°p</Select.Option>
            </Select>
          </Form.Item>

          <Form.Item label="Template ghi ch√∫">
            <Select
              placeholder="Ch·ªçn template ƒë·ªÉ b·∫Øt ƒë·∫ßu nhanh (t√πy ch·ªçn)"
              allowClear
              onChange={(template) => {
                if (template && markdownTemplates[template]) {
                  setNewNoteContent(markdownTemplates[template]);
                }
              }}
            >
              <Select.Option value="blank">üìÑ Tr·ªëng</Select.Option>
              <Select.Option value="meeting">ü§ù Ghi ch√∫ cu·ªôc h·ªçp</Select.Option>
              <Select.Option value="study">üìö Ghi ch√∫ h·ªçc t·∫≠p</Select.Option>
              <Select.Option value="todo">‚úÖ To-Do List</Select.Option>
              <Select.Option value="research">üîç Nghi√™n c·ª©u</Select.Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="content"
            label={
              <div className="flex items-center justify-between w-full">
                <span>N·ªôi dung</span>
                <div className="text-xs text-gray-500 flex items-center gap-4">
                  <span>üí° Ctrl/Cmd + S = l∆∞u</span>
                  <span>Ctrl/Cmd + F = t√¨m ki·∫øm</span>
                  <span>F11 = to√†n m√†n h√¨nh</span>
                </div>
              </div>
            }
          >
            <NotebookLMEditor
              value={newNoteContent}
              onChange={setNewNoteContent}
              height={500}
              autoSave={false}
              placeholder="‚ú® Vi·∫øt ghi ch√∫ b·∫±ng Markdown...\n\nüí° M·∫πo:\n‚Ä¢ **in ƒë·∫≠m** ho·∫∑c *in nghi√™ng*\n‚Ä¢ # Ti√™u ƒë·ªÅ l·ªõn\n‚Ä¢ ## Ti√™u ƒë·ªÅ nh·ªè\n‚Ä¢ - Danh s√°ch\n‚Ä¢ 1. Danh s√°ch s·ªë\n‚Ä¢ [Link](https://example.com)\n‚Ä¢ `code` ho·∫∑c ```code block```\n‚Ä¢ > Tr√≠ch d·∫´n\n‚Ä¢ K√©o th·∫£ h√¨nh ·∫£nh tr·ª±c ti·∫øp"
              title={noteForm.getFieldValue('title')}
              showStatusBar={true}
              collaborative={false}
            />
          </Form.Item>

          <Form.Item className="mb-0 text-right">
            <Space>
              <Button 
                onClick={() => {
                  setNoteModalOpen(false);
                  setNewNoteContent("");
                  noteForm.resetFields();
                }}
              >
                H·ªßy
              </Button>
              <Button type="primary" htmlType="submit">
                Th√™m
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Delete Modal */}
      <Modal
        title={sessionToDelete ? "X√≥a phi√™n chat" : "X√≥a ghi ch√∫"}
        open={deleteModalOpen}
        onOk={handleDeleteConfirm}
        onCancel={handleDeleteCancel}
        okText="X√≥a"
        cancelText="H·ªßy"
        okType="danger"
      >
        <p>
          {sessionToDelete 
            ? "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a phi√™n chat n√†y?"
            : "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ghi ch√∫ n√†y?"
          }
        </p>
      </Modal>

      {/* Edit Note Modal */}
      <Modal
        title="S·ª≠a ghi ch√∫"
        open={editNoteModalOpen}
        onCancel={() => {
          setEditNoteModalOpen(false);
          setNoteToEdit(null);
          setEditNoteContent("");
          editNoteForm.resetFields();
        }}
        footer={null}
        width={1000}
        style={{ top: 20 }}
        centered={false}
      >
        <Form form={editNoteForm} layout="vertical" onFinish={handleUpdateNote}>
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ" }]}
          >
            <Input placeholder="Ti√™u ƒë·ªÅ ghi ch√∫..." />
          </Form.Item>

          <Form.Item name="type" label="Lo·∫°i ghi ch√∫">
            <Select>
              <Select.Option value="text">VƒÉn b·∫£n th∆∞·ªùng</Select.Option>
              <Select.Option value="summary">T√≥m t·∫Øt</Select.Option>
              <Select.Option value="outline">Outline</Select.Option>
              <Select.Option value="qa">H·ªèi ƒë√°p</Select.Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="content"
            label="N·ªôi dung"
          >
            <NotebookLMEditor
              value={editNoteContent}
              onChange={setEditNoteContent}
              height={500}
              autoSave={false}
              placeholder="‚ú® Ch·ªânh s·ª≠a ghi ch√∫ b·∫±ng Markdown...\n\nüí° M·∫πo:\n‚Ä¢ **in ƒë·∫≠m** ho·∫∑c *in nghi√™ng*\n‚Ä¢ # Ti√™u ƒë·ªÅ l·ªõn\n‚Ä¢ ## Ti√™u ƒë·ªÅ nh·ªè\n‚Ä¢ - Danh s√°ch\n‚Ä¢ 1. Danh s√°ch s·ªë\n‚Ä¢ [Link](https://example.com)\n‚Ä¢ `code` ho·∫∑c ```code block```\n‚Ä¢ > Tr√≠ch d·∫´n\n‚Ä¢ K√©o th·∫£ h√¨nh ·∫£nh tr·ª±c ti·∫øp"
              title={editNoteForm.getFieldValue('title')}
              showStatusBar={true}
              collaborative={false}
            />
          </Form.Item>

          <Form.Item className="mb-0 text-right">
            <Space>
              <Button
                onClick={() => {
                  setEditNoteModalOpen(false);
                  setNoteToEdit(null);
                  editNoteForm.resetFields();
                }}
              >
                H·ªßy
              </Button>
              <Button type="primary" htmlType="submit">
                C·∫≠p nh·∫≠t
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Create Note from Chat Modal */}
      <Modal
        title="T·∫°o ghi ch√∫ t·ª´ chat"
        open={createNoteFromChatModalOpen}
        onCancel={() => {
          setCreateNoteFromChatModalOpen(false);
          setSelectedMessages([]);
        }}
        footer={null}
        width={800}
        centered
      >
        <div className="mb-4">
          <Text type="secondary">
            {selectedMessages.length} tin nh·∫Øn ƒë√£ ch·ªçn
          </Text>
        </div>

        <Form form={chatNoteForm} layout="vertical" onFinish={handleSaveChatNote}>
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ ghi ch√∫"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ ghi ch√∫" }]}
          >
            <Input placeholder="Ti√™u ƒë·ªÅ ghi ch√∫ t·ª´ chat..." />
          </Form.Item>

          <Form.Item
            name="content"
            label="N·ªôi dung ghi ch√∫"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫" }]}
          >
            <TextArea
              rows={6}
              placeholder="N·ªôi dung ghi ch√∫ ƒë∆∞·ª£c t·∫°o t·ª´ tin nh·∫Øn ƒë√£ ch·ªçn..."
              value={chatNoteContent}
              onChange={(e) => setChatNoteContent(e.target.value)}
            />
          </Form.Item>

          <Form.Item className="mb-0 text-right">
            <Space>
              <Button
                onClick={() => {
                  setCreateNoteFromChatModalOpen(false);
                  setSelectedMessages([]);
                }}
              >
                H·ªßy
              </Button>
              <Button type="primary" htmlType="submit">
                T·∫°o ghi ch√∫
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
