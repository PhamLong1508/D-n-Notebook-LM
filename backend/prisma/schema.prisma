// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  role      Role       @default(user)
  createdAt DateTime   @default(now())
  notebooks Notebook[]
}

model Notebook {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  notes        Note[]
  sources      Source[]
  chatSessions ChatSession[]
}

model Note {
  id         Int      @id @default(autoincrement())
  title      String
  content    String   @db.Text
  type       NoteType @default(text)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notebookId Int
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  sources    Source[]
}

model Source {
  id             Int        @id @default(autoincrement())
  title          String
  content        String     @db.Text
  url            String?
  type           SourceType
  fileName       String?
  storedFileName String?
  fileSize       Int?
  createdAt      DateTime   @default(now())
  notebookId     Int
  notebook       Notebook   @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notes          Note[]
}

model ChatSession {
  id         Int           @id @default(autoincrement())
  title      String        @default("Chat Session")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  notebookId Int
  notebook   Notebook      @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  messages   ChatMessage[]
}

model ChatMessage {
  id            Int         @id @default(autoincrement())
  role          MessageRole
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  chatSessionId Int
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

enum NoteType {
  text
  summary
  outline
  qa
}

enum SourceType {
  document
  webpage
  pdf
  text
}

enum MessageRole {
  user
  assistant
  system
}
